<?xml version="1.0" encoding="UTF-8" ?>

<!--  通用字符串函数 测试用例  -->
<testCase>

    <!--  字符串翻转  reverse(s: String): String  -->
    <case type="query">
        <sql>select reverse(?);</sql>
        <assertion id="01" expected="string_001.xml">['start-db']</assertion>
        <assertion id="02" expected="error:参数有误">[null]</assertion>
    </case>

    <!--  将字符串转成大写  upper(s: String): String  -->
    <case type="query">
        <sql>select upper(?);</sql>
        <assertion id="01" expected="string_002.xml">['start-db']</assertion>
        <assertion id="02" expected="error:参数有误">[null]</assertion>
    </case>

    <!--  将字符串转成小写  lower(s: String): String  -->
    <case type="query">
        <sql>select lower(?);</sql>
        <assertion id="01" expected="string_003.xml">['start-DB']</assertion>
        <assertion id="02" expected="error:参数有误">[null]</assertion>
    </case>

    <!--  返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集
            substring(s: String, start: Integer[, len: Integer]): String  -->
    <case type="query">
        <sql>select substring(?, ?, ?);</sql>
        <assertion id="01" expected="string_004.xml">['start-db'][1][3]</assertion>
    </case>

    <!--  字符串去除首尾空格  trim(s: String): String  -->
    <case type="query">
        <sql>select trim(?);</sql>
        <assertion id="01" expected="string_005.xml">['    start    ']</assertion>
        <assertion id="02" expected="error:参数有误">[null]</assertion>
    </case>

    <!--  字符串去除左边空格  ltrim(s: String): String  -->
    <case type="query">
        <sql>select trim(?);</sql>
        <assertion id="01" expected="string_006.xml">['  start']</assertion>
        <assertion id="02" expected="error:参数有误">[null]</assertion>
    </case>

    <!--  字符串去除右边空格  rtrim(s: String): String  -->
    <case type="query">
        <sql>select trim(?);</sql>
        <assertion id="01" expected="string_007.xml">['start  ']</assertion>
        <assertion id="02" expected="error:参数有误">[null]</assertion>
    </case>

    <!--  字符串连接  concat(s1: String, s2: String, …): String  -->
    <case type="query">
        <sql>select concat(?, ?);</sql>
        <assertion id="01" expected="string_008.xml">['start']['db']</assertion>
    </case>

    <!--  字符串左侧填充空格  lpad(str: String, len: Int): String  -->
    <case type="query">
        <sql>select lpad(?, ?);</sql>
        <assertion id="01" expected="string_009.xml">['start'][7]</assertion>
    </case>

    <!--  字符串左侧填充指定字符  lpad(str: String, len: Int, pad: String): String  -->
    <case type="query">
        <sql>select lpad(?, ?, ?);</sql>
        <assertion id="01" expected="string_010.xml">['start'][7]['db']</assertion>
    </case>

    <!--  字符串右侧填充空格  rpad(str: String, len: Int): String  -->
    <case type="query">
        <sql>select rpad(?, ?);</sql>
        <assertion id="01" expected="string_011.xml">['start'][7]</assertion>
    </case>

    <!--  字符串右侧填充指定字符  rpad(str: String, len: Int, pad: String): String  -->
    <case type="query">
        <sql>select rpad(?, ?, ?);</sql>
        <assertion id="01" expected="string_012.xml">['start'][7]['db']</assertion>
    </case>

    <!--  返回字符串占用的字节数  length(str: String): Int  一个中文占3个字节-->
    <case type="query">
        <sql>select length(?);</sql>
        <assertion id="01" expected="string_013.xml">['start_db']</assertion>
        <assertion id="02" expected="string_013.xml">['开心工作']</assertion>
        <assertion id="03" expected="error:参数有误">[null]</assertion>
    </case>

    <!--  返回字符串的长度，一个多字节字符算作一个字符  charLength(str: String): Int  -->
    <case type="query">
        <sql>select charLength(?);</sql>
        <assertion id="01" expected="string_014.xml">['start_db']</assertion>
        <assertion id="02" expected="string_014.xml">['开心工作']</assertion>
        <assertion id="03" expected="error:参数有误">[null]</assertion>
    </case>

    <!--  子串定位，返回子串第一次出现的位置(从1开始),如果没有找到返回0
        locate(substr: String, str: String): Int  -->
    <case type="query">
        <sql>select locate(?, ?);</sql>
        <assertion id="01" expected="string_015.xml">['la']['strlala']</assertion>
    </case>

    <!--  子串定位，返回子串在第pos位置后第一次出现的位置（从1开始）,如果没有找到，返回0
        locate(substr: String, str: String, pos: Int): Int  -->
    <case type="query">
        <sql>select locate(?, ?, ?);</sql>
        <assertion id="01" expected="string_016.xml">['la']['strlala'][5]</assertion>
    </case>

    <!--  字符串转md5  md5(s: String): String  -->
    <case type="query">
        <sql>select md5(?);</sql>
        <assertion id="01" expected="string_017.xml">['123asdf@#-_+!?']</assertion>
    </case>


</testCase>